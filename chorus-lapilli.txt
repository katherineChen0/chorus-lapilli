Chorus Lapilli rule adjustments
1. Max 3 pieces per player
- when a player has placed 3 pieces, the player have to use the existing piece to an adjacent empty square, including diagonals.
2. if a player has a piece in the center (index 4) and it is their turn with 3 on the board, they must either win on that move of vacate the center square
- to do this, you need to track how many pieces each player has on the board
	enable select mode and clicking the valid adjacent empty square
	restrict moves during move phase:
		only allow moves from own pieces
		only allow destination squares that are adjacent and empty
		enforce center-square rule if applicable

Implementation
The first thing to change is making sure players only have 3 pieces on a board at a time. That would require changing this
let numX = 0;
let numO = 0;
for (let i = 0; i < squares.length; i++) {
  if (squares[i] === 'X')
    numX++;
  else if (squares[i] === 'O')
    numO++;
}
into one that checks if there are 3:
if (numX === 3 && xIsNext)
  return;
if (numO === 3 && !xIsNext)
  return;
When each player has 3 pieces on a board, they can't make any more moves.

Next is getting the selecting logic to work. The initial code:
if (calculateWinner(squares)) {
  return;
}
if (squares[i]) {
  return;
}
requires changing to set the moving square to:
if (numX === 3 && xIsNext) {
  if (squares[i] === "X")
    setMovingSquare(i);
  return;
}
if (numO === 3 && !xIsNext) {
  if (squares[i] === "O")
    setMovingSquare(i);
  return;
}
now the movingSquare state is set to the appropriate square. Users can choose a piece to move if it is theirs.

Updating the status text is an additional feature to let the players know that they are selecting. For this, a hash map would be the most efficient.

const posToWords = { 
0:"Top-left", 
1: "Top-middle", 
2: "Top-right", 
3: "Middle-left", 
4: "Center", 
5: "Middle-right", 
6: "Bottom-left", 
7: "Bottom-middle", 
8: "Bottom-right", 
null: "None" }
now the code that updates the status text, another if statement shows the status text.

actually implementing the moving the chosen piece 
The new if statment within both of the numX and numO ones so it checks if the square is empty. If it is empty, check to make sure that the movableSquare is not null. If both conditions are met, the nextSquares array is modified so that the movingSquare and square clicked have their values swapped.

if (squares[i] === null) {
  if (movingSquare) {
    nextSquares[i] = squares[movingSquare];
    nextSquares[movingSquare] = squares[i];
    setMovingSquare(null);
    setSquares(nextSquares);
    setXIsNext(!xIsNext);
  }
}

Making sure that it moves to the right place.
 Make is so a piece can only move one block besides it, including diagonals.

const validPos = [
    [1, 3, 4],
    [0, 2, 3, 4, 5],
    [1, 4, 5],
    [0, 1, 4, 6, 7],
    [0, 1, 2, 3, 5, 6, 7, 8],
    [1, 2, 4, 7, 8],
    [3, 4, 7],
    [3, 4, 5, 6, 8],
    [4, 5, 7]
] 

A new function called calculateMovable
function calculateMovable(squares, startPos, endPos, playerLetter) 
 return if the endPosition is in the array of validPositions for the startPosition's valid position array
return validPos[startPos].includes(endPos);

if (squares[i] === null) {
  if (movingSquare) {
    if (calculateMovable(squares, movingSquare, i, "X")) {
      ...
    }
  }
}
...
if (squares[i] === null) {
  if (movingSquare) {
    if (calculateMovable(squares, movingSquare, i, "O")) {
      ...
    }
  }
}
This code is another nested if statement within the numX and numO if statements. Now the UI only allows players to move pieces to spots that are next to that spot.

Center square rule
Now is implementing the center square rule. you just add an if statement into the calculateMovable which checks if the center square contained the player's letter. If it did, then the player has to move the center square

if (squares[4] === playerLetter && startPos !== 4 && validPos[startPos].includes(endPos)) {
  const nextSquares = squares.slice();
  nextSquares[startPos] = squares[endPos];
  nextSquares[endPos] = squares[startPos];
  return calculateWinner(nextSquares);
}

below is the entire code:
import React from 'react';
import { useState } from 'react';

const posToWords = { 0:"Top-left", 1: "Top-middle", 2: "Top-right", 3: "Middle-left", 4: "Center", 5: "Middle-right", 6: "Bottom-left", 7: "Bottom-middle", 8: "Bottom-right", null: "None"}

function Square({value, onSquareClick}) {
  return (
    <button className="square" onClick={onSquareClick}>
      {value}
    </button>
  );
}

export default function Board() {
  const [xIsNext, setXIsNext] = useState(true);
  const [squares, setSquares] = useState(Array(9).fill(null));
  const [movingSquare, setMovingSquare] = useState(null);

  let numX = 0;
  let numO = 0;
  for (let i = 0; i < squares.length; i++) {
    if (squares[i] === 'X')
      numX++;
    else if (squares[i] === 'O')
      numO++;
  }

  function handleClick(i) {
    if (calculateWinner(squares)) {
      return;
    }

    const nextSquares = squares.slice();

    if (numX === 3 && xIsNext) {
      if (squares[i] === "X")
        setMovingSquare(i);
      if (calculateMovable(squares, movingSquare, i, "X")) {
          nextSquares[i] = squares[movingSquare];
          nextSquares[movingSquare] = squares[i];
          setMovingSquare(null);
          setSquares(nextSquares);
          setXIsNext(!xIsNext);
      }
      return;
    }

    if (numO === 3 && !xIsNext) {
      if (squares[i] === "O")
        setMovingSquare(i);
      if (calculateMovable(squares, movingSquare, i, "O")) {
          nextSquares[i] = squares[movingSquare];
          nextSquares[movingSquare] = squares[i];
          setMovingSquare(null);
          setSquares(nextSquares);
          setXIsNext(!xIsNext);
       }
      return;
    }

    if (squares[i]) {
      return;
    }

    if (xIsNext) {
      nextSquares[i] = 'X';
    } else {
      nextSquares[i] = 'O';
    }
    setSquares(nextSquares);
    setXIsNext(!xIsNext);
  }

  const winner = calculateWinner(squares);
  let status;
  if (winner) {
    status = 'Winner: ' + winner;
  } else {
    status = 'Next player: ' + (xIsNext ? 'X' : 'O');
    if ((xIsNext && numX === 3) || (!xIsNext && numO === 3))
      status += " (Selected: " + posToWords[movingSquare] + ")";
  }

  return (
    <React.Fragment>
      <div className="status">{status}</div>
      <div className="board-row">
        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />
        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />
        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />
      </div>
      <div className="board-row">
        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />
        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />
        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />
      </div>
      <div className="board-row">
        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />
        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />
        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />
      </div>
    </React.Fragment>
  );
}

function calculateWinner(squares) {
  const lines = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6],
  ];
  for (let i = 0; i < lines.length; i++) {
    const [a, b, c] = lines[i];
    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
      return squares[a];
    }
  }
  return null;
}

function calculateMovable(squares, startPos, endPos, playerLetter) {
  if (startPos === null || endPos === null || squares[endPos] !== null)
    return false;
  const validPos = [
    [1, 3, 4],
    [0, 2, 3, 4, 5],
    [1, 4, 5],
    [0, 1, 4, 6, 7],
    [0, 1, 2, 3, 5, 6, 7, 8],
    [1, 2, 4, 7, 8],
    [3, 4, 7],
    [3, 4, 5, 6, 8],
    [4, 5, 7]
  ]

  if (squares[4] === playerLetter && startPos !== 4 && validPos[startPos].includes(endPos)) {
    const nextSquares = squares.slice();
    nextSquares[startPos] = squares[endPos];
    nextSquares[endPos] = squares[startPos];
    return calculateWinner(nextSquares);
  }

  return validPos[startPos].includes(endPos);
}